<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JS on wubigo</title>
    <link>https://wubigo.com/tags/js/</link>
    <description>Recent content in JS on wubigo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Dec 2018 12:11:49 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript Arrow Functions</title>
      <link>https://wubigo.com/post/javascript-arrow-functions/</link>
      <pubDate>Tue, 04 Dec 2018 12:11:49 +0800</pubDate>
      
      <guid>https://wubigo.com/post/javascript-arrow-functions/</guid>
      <description>JavaScript Arrow Functions https://zendev.com/2018/10/01/javascript-arrow-functions-how-why-when.html</description>
    </item>
    
    <item>
      <title>Gatsby Notes</title>
      <link>https://wubigo.com/post/gatsby-notes/</link>
      <pubDate>Mon, 03 Sep 2018 09:03:37 +0800</pubDate>
      
      <guid>https://wubigo.com/post/gatsby-notes/</guid>
      <description>bind eip gatsby develop -- --host=0.0.0.0  Prettier VS Code plugin JSX The hybrid “HTML-in-JS” is actually a syntax extension
of JavaScript, for React, called JSX
In pure JavaScript, it looks more like this:
src/pages/index.js
import React from &amp;quot;react&amp;quot; export default () =&amp;gt; React.createElement(&amp;quot;div&amp;quot;, null, &amp;quot;Hello world!&amp;quot;)  Now you can spot the use of the &amp;lsquo;react&amp;rsquo; import! But wait. You’re writing JSX, not pure HTML and
JavaScript. How does the browser read that?</description>
    </item>
    
    <item>
      <title>Vue notes</title>
      <link>https://wubigo.com/post/js-vue/</link>
      <pubDate>Wed, 25 Apr 2018 12:02:41 +0800</pubDate>
      
      <guid>https://wubigo.com/post/js-vue/</guid>
      <description>Single File Components single-file components with a .vue extension is build by tools
such as Webpack or Browserify
A single-file component consists of three parts:
- &amp;lt;template&amp;gt; which contains the component’s markup in plain HTML - &amp;lt;script&amp;gt; which exports the component object constructor that consists of all the JS logic within that component - &amp;lt;style&amp;gt; which contains all the component styles  CORE  Virtual DOM Component-based UI Focus on the view library—separate concerns for routing, state management Official component library for building mobile apps</description>
    </item>
    
    <item>
      <title>Web vue-cli Note</title>
      <link>https://wubigo.com/post/js-vue-cli-note/</link>
      <pubDate>Sat, 10 Feb 2018 22:21:38 +0800</pubDate>
      
      <guid>https://wubigo.com/post/js-vue-cli-note/</guid>
      <description>webpack-simple Webpack is a module bundler for Javascript applications,
it starts at the entrypoint and then build a dependency
graph of the whole application, pulling those dependencies
into one or more bundles that can be included in application.
It supports multiple different file types through loaders,
loaders will take files that have no concept of modules (e.g. css)
and process them in a way that allows them to participate</description>
    </item>
    
    <item>
      <title>Nodejs Notes</title>
      <link>https://wubigo.com/post/nodejs-notes/</link>
      <pubDate>Sun, 03 Dec 2017 08:39:52 +0800</pubDate>
      
      <guid>https://wubigo.com/post/nodejs-notes/</guid>
      <description>set registry npm config set registry=http://registry.npm.taobao.org npm config ls -l userconfig = &amp;quot;C:\\Users\\Administrator\\.npmrc&amp;quot;  declare variables ES6 comes with two more options to declare your variables: const and let. In JavaScript ES6, you will
rarely find var anymore.
A variable declared with const cannot be re-assigned or re-declared. It cannot get mutated (changed,
modified)
Immutability is embraced in React and its ecosystem. That’s why const should be your default</description>
    </item>
    
  </channel>
</rss>