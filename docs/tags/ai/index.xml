<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI on wubigo</title>
    <link>https://wubigo.com/tags/ai/</link>
    <description>Recent content in AI on wubigo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 May 2024 17:59:50 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>图像处理中的卷积核kernel</title>
      <link>https://wubigo.com/post/cnn-kernel-notes/</link>
      <pubDate>Fri, 10 May 2024 17:59:50 +0800</pubDate>
      
      <guid>https://wubigo.com/post/cnn-kernel-notes/</guid>
      <description>图像处理中的卷积核kernel
简介 卷积核（kernel），也叫卷积矩阵（convolution matrix）或者掩膜（mask），本质上是一个非常小的矩阵，最常用的是 3×3 矩阵。主要是利用核与图像之间进行卷积运算来实现图像处理，能做出模糊、锐化、凹凸、边缘检测等效果。
卷积运算 第一个矩阵是卷积核（其中的每个元素都是权重），第二个矩阵是被处理的矩阵，这里的并不是真正矩阵运算中，而是将卷积核中的行和列都反转再*，将计算得到的加权结果赋值给[2, 2]位置处. 将一个比较大的原始矩阵的每一个位置处都根据核进行上述的运算，就得到整个原始矩阵的加权平均结果，也就是原始矩阵卷积运算后的结果
[1]https://blog.csdn.net/i_silence/article/details/116483732</description>
    </item>
    
    <item>
      <title>Pytorch multinominal采样函数</title>
      <link>https://wubigo.com/post/torch-multinominal-notes/</link>
      <pubDate>Wed, 30 Nov 2022 14:35:01 +0800</pubDate>
      
      <guid>https://wubigo.com/post/torch-multinominal-notes/</guid>
      <description>torch.multinominal方法可以根据给定权重对数组进行多次采样，返回采样后的元素下标
参数说明 input ：权重，也就是取每个值的概率，可以是1维或2维。可以不进行归一化。 num_samples ： 采样的次数。如果input是二维的，则表示每行的采样次数 replacement ：默认值值是False，即不放回采样。如果replacement =False，则num_samples必须小于input中非零元素的数目
按权重采样 从四个元素中随机选择两个，每个元素被选择到的概率分别为：[0.2, 0.2, 0.3, 0.3]：
&amp;gt;&amp;gt;&amp;gt; weights = torch.Tensor([0.9, 0.25, 0.1, 0.15]) # 采样权重 &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([0, 1]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([1, 3]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([0, 3]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([3, 1]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([1, 0]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([1, 0]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([0, 1]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([0, 2]) &amp;gt;&amp;gt;&amp;gt; torch.multinomial(weights, 2) tensor([3, 0]) &amp;gt;&amp;gt;&amp;gt; torch.</description>
    </item>
    
    <item>
      <title>面部生物识别学习笔记</title>
      <link>https://wubigo.com/post/face-detection-notes/</link>
      <pubDate>Sat, 23 Jan 2021 19:58:46 +0800</pubDate>
      
      <guid>https://wubigo.com/post/face-detection-notes/</guid>
      <description>Once the face is detected, the AI then provides the information on
its size, pose, and location
The state-of-the-art face detection software uses pattern detection technology.
No personal data is collected, and no images are stored.
人脸检测基本方法 #Import Libraries #Import Classifier for Face and Eye Detection #Convert Image to Grayscale #Give coordinates to detect face and eyes location from ROI #Webcam setup for Face Detection #When everything is done, release the capture</description>
    </item>
    
  </channel>
</rss>