<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CACHE on wubigo</title>
    <link>https://wubigo.com/tags/cache/</link>
    <description>Recent content in CACHE on wubigo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Feb 2022 11:40:58 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/cache/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis消息队列和实时数据处理</title>
      <link>https://wubigo.com/post/redis-as-real-time-database/</link>
      <pubDate>Sat, 05 Feb 2022 11:40:58 +0800</pubDate>
      
      <guid>https://wubigo.com/post/redis-as-real-time-database/</guid>
      <description>项目简介 最近在做工业自动化(IIoT)项目，涉及到很多场景需要对一系列设备进行监控和信号处理。 该类场景对实时处理能力，系统稳定性，高可用性，容灾能力等等要求非常高。 其中几个核心的需求：
 设备数据不能丢失 实时告警(毫秒级延迟) 设备数据必须优先在边缘节点处理，边缘节点的物理服务器只有两台 每个边缘节点接入的设备上行数据量大概6万点/秒，数据包小于1K 中心需要汇聚和分析所有边缘节点的设备数据  技术现状 实时数据处理 实时数据处理是一个自 1990 年代以来一直在研究的问题 。 产生的数据量增加了，加上越来越复杂的软件解决方案 开发，需要满足这些需求出现了流式应用程序，例如 欺诈检测、网络监控和电子交易依赖于实时数据处理 确保所提供的服务被认为是正确和可靠的。 绝大多数现代应用程序使用某种数据库管理系统 处理数据。当应用程序收集或生成数据时，它会被存储和索引 它可以在以后由应用程序查询。但是，对于具有更严格 对实时数据处理的要求，这不是一个合适的方法。这是流的地方 处理开始发挥作用。流处理是在接收数据时直接处理数据。实时流 处理应用程序通常具有必须满足的某些关键要求。有低 输入和处理后的数据输出之间的延迟是实现实时的关键特征 应用。更传统的批处理方法需要以这样的方式收集数据 称为批次，其中处理只能在每个批次的最终数据块完成后开始 到达的。对于实时用例，这导致的延迟是不可接受的，因为这些实时的延迟 流应用程序最好在毫秒内。
现有资源 公司现有的工控产品都是基于微服务架构实现的。用于满足超大型集团公司 工控自动化需求:DEV/OPS，PaaS，双活，AI/OPS等。需要上百个虚机来支 撑现有的工控平台。
技术调研 更换消息中间件 使用REDIS STREAM替换消息中间件。 在测试中，发现REDIS作为队列，使用比较方便：
 消息队列动态创建，目前以时间戳为标识方便处理(例如&amp;rdquo;STREAM:02041123&amp;rdquo;) 消息队列消费完后删除，释放内存( isDelived &amp;amp;&amp;amp; isSaved -&amp;gt; redisson.getKeys().delete(&amp;ldquo;STREAM:02041123&amp;rdquo;)) 动态检查消息队列列表，如果没有消费，立即处理(redisson.getKeys()) 主节点配置为缓存，从节点配置为存储  经过测试，现在redis消息队列每小时能处理2千万条的设备数据。 还需要进一步优化。
REDIS消息处理确认流程图 更换分布式监控 更换实时数据库 参考 [1] A COMPARISON OF DATA INGESTION PLATFORMS IN REAL-TIME STREAMING
[2] Interview with the Creator of Redisson</description>
    </item>
    
    <item>
      <title>Redis With Spring Boot V2</title>
      <link>https://wubigo.com/post/redis-with-spring-boot-v2/</link>
      <pubDate>Thu, 28 Apr 2016 17:08:07 +0800</pubDate>
      
      <guid>https://wubigo.com/post/redis-with-spring-boot-v2/</guid>
      <description>LETTUCE VS JEDIS While Jedis is easy to use and supports a vast number of Redis features, it is not thread safe and needs connection pooling to work in a multi-threaded environment. Connection pooling comes at the cost of a physical connection per Jedis instance which increases the number of Redis connections.
Lettuce, on the other hand, is built on netty (https://netty.io/) and connection instances can be shared across multiple threads.</description>
    </item>
    
    <item>
      <title>Redis Notes</title>
      <link>https://wubigo.com/post/redis-notes/</link>
      <pubDate>Thu, 02 Aug 2012 07:34:07 +0800</pubDate>
      
      <guid>https://wubigo.com/post/redis-notes/</guid>
      <description>系统配置 /etc/sysctl.conf
vm.swappiness = 1 vm.overcommit_memory = 1  改变数据目录 sudo install -o redis -g redis -d /mnt/redis-data &amp;gt; config get dir 1) &amp;quot;dir&amp;quot; 2) &amp;quot;/mnt/redis-data&amp;quot;  /lib/systemd/system/redis-server.service
[Service] ReadWriteDirectories=-/mnt/redis-data  pidfile NOT FOUND FROM SYSTEMD /etc/redis/redis.conf
pidfile /var/run/redis/redis-server.pid  /lib/systemd/system/redis-server.service
PIDFile=/run/redis/redis-server.pid  删除消费组 XGROUP DESTROY STREAM:TEST STRRAM:TEST:GROUP  Redis latency problems troubleshooting  Make sure you are not running slow commands that are blocking the server. Use the Redis Slow Log feature to check this.</description>
    </item>
    
  </channel>
</rss>