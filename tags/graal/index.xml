<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GRAAL on wubigo</title>
    <link>https://wubigo.com/tags/graal/</link>
    <description>Recent content in GRAAL on wubigo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Oct 2019 10:17:03 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/graal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JAVA这两年</title>
      <link>https://wubigo.com/post/java-last-2-years/</link>
      <pubDate>Tue, 29 Oct 2019 10:17:03 +0800</pubDate>
      
      <guid>https://wubigo.com/post/java-last-2-years/</guid>
      <description>JAVA 这两年最重要的项目就是GRAAL的正式版发布。
GRAAL能做什么？
 让解释性程序例如JAVA, JS 运行的更快: AOT编译为宿主二进制可执行文件,  启动时间小于100ms， 像C, GO, ERLANG一样的执行速度
 更低的内存占用：只占用传统的JVM应用20%的内存
  听起来是不是该项目为函数计算做准备的？
是，但不完全是。
GRAAL的官方目标是提供一个统一的虚拟机执行平台，支持如下运行环境：
 JavaScrip Python Ruby R JVM 语言（Java, Scala, Groovy, Kotlin, Clojure） LLVM语言 (C , C++)  而且不同语言之间零成本互相调用
安装 wget https://github.com/oracle/graal/releases/download/vm-19.2.1/graalvm-ce-linux-amd64-19.2.1.tar.gz tar zxvf graalvm-ce-linux-amd64-19.2.1.tar.gz export PATH=$PATH:$GRAAL_HOME/bin   检查
js --version GraalVM JavaScript (GraalVM CE Native 19.2.1)  安装native-image
gu install native-image  gu available Downloading: Component catalog from www.graalvm.org ComponentId Version Component name Origin -------------------------------------------------------------------------------- llvm-toolchain 19.</description>
    </item>
    
  </channel>
</rss>