<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IOT on wubigo</title>
    <link>https://wubigo.com/tags/iot/</link>
    <description>Recent content in IOT on wubigo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Mar 2022 15:39:42 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/iot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Edgex Device Service Dev Env Setup</title>
      <link>https://wubigo.com/post/edgex-device-service-dev-env-setup/</link>
      <pubDate>Fri, 11 Mar 2022 15:39:42 +0800</pubDate>
      
      <guid>https://wubigo.com/post/edgex-device-service-dev-env-setup/</guid>
      <description>搭建EDGX设备服务开发环境
启动EDGEX核心服务 wget https://raw.githubusercontent.com/edgexfoundry/edgex-compose/jakarta/docker-compose-no-secty.yml docker-compose -f docker-compose-no-secty.yml up -d  打开数据和控制服务调试开关 在consul里面配置应用：
http://localhost:8500/ui/dc1/kv/edgex/appservices/2.0/app-rules-engine/Writable/LogLevel/edit
修改INFO为DEBUG
在IDE里面启动设备服务 以IP摄像头设备服务为例
打开WEBCAM webcam-to-ip-camera
配置开发环境 git clone git@github.com:edgexfoundry/device-camera-go.git git checkout jakarta cd device-camera-go set EDGEX_SECURITY_SECRET_STORE=false  调整IDE的当前工作目录为：device-camera-go\cmd 否则，设备服务启动会找不到设备配置文件。
或者移动资源文件到IDE当前工作目录
mv -rf cmd/res .  打开设备服务调试日志并启动设备服务 res/configuration.toml @@ -1,5 +1,5 @@ [Writable] -LogLevel = &amp;quot;INFO&amp;quot; +LogLevel = &amp;quot;DEBUG&amp;quot; level=INFO ts=2022-03-11T08:13:54.8106393Z app=device-camera source=devices.go:87 msg=&amp;quot;Device Camera001 not found in Metadata, adding it ...&amp;quot; level=INFO ts=2022-03-11T08:13:54.8133486Z app=device-camera source=autodiscovery.go:33 msg=&amp;quot;AutoDiscovery stopped: disabled by configuration&amp;quot; level=INFO ts=2022-03-11T08:13:54.</description>
    </item>
    
    <item>
      <title>Mainflux Dev Setup</title>
      <link>https://wubigo.com/post/mainflux-dev-setup/</link>
      <pubDate>Mon, 20 Dec 2021 17:04:37 +0800</pubDate>
      
      <guid>https://wubigo.com/post/mainflux-dev-setup/</guid>
      <description> BUILD mkdir -p $GOPATH/src/github.com/mailflux git clone https://github.com/wubigo/mainflux.git cd github.com/mailflux/mailflux/ make make dockers_dev make run  Provision the System mainflux-cli provision test  GET TOKEN curl -k https://172.21.53.253/tokens { &amp;quot;email&amp;quot;: &amp;quot;bold_gould@email.com&amp;quot;, &amp;quot;password&amp;quot;: &amp;quot;12345678&amp;quot; }  </description>
    </item>
    
    <item>
      <title>Connect KEPServer to Ali IoT</title>
      <link>https://wubigo.com/post/connect-kepserver-to-ali-iot/</link>
      <pubDate>Thu, 16 Dec 2021 13:40:38 +0800</pubDate>
      
      <guid>https://wubigo.com/post/connect-kepserver-to-ali-iot/</guid>
      <description>Configure an MQTT Client Agent within the IoT Gateway Plug-In for KEPServerEX
to send data to Ali IoT. The connection can be made using MQTT over Transmission
Control Protocol (TCP) and MQTT over Transport Layer Security (TLS).
set up Kepware KEPServerEX IoT Gateway on Windows to connect with the MQTT bridge
of IoT Core to push streaming data to Cloud and send control messages from IoT
Core back to KEPServerEX</description>
    </item>
    
    <item>
      <title>Webcam to IP Camera</title>
      <link>https://wubigo.com/post/webcam-to-ip-camera/</link>
      <pubDate>Thu, 11 Mar 2021 09:34:40 +0800</pubDate>
      
      <guid>https://wubigo.com/post/webcam-to-ip-camera/</guid>
      <description>摄像头的区别 USB vs RTSP vs ONVIF If we use USB cameras we do not need the camera url and some functions like moving, zooming etc. will not be available. In the case of RTSP cameras and ONVIF cameras there are more functions available. The difference between the RTSP camera and the ONVIF camera is the following: the RTSP camera has only one stream in comparsion with the ONVIF camera having multiple streams at a time</description>
    </item>
    
    <item>
      <title>物联网核心构件</title>
      <link>https://wubigo.com/post/iot-building-blocks/</link>
      <pubDate>Wed, 02 May 2018 18:43:38 +0800</pubDate>
      
      <guid>https://wubigo.com/post/iot-building-blocks/</guid>
      <description> 物联网架构 An IoT Architecture consists of the following: - Peripherals, which we call “things”. - Sensors attached to these things to gauge and transmit their data and information. - Network connection through which data is transmitted (wireless or wired). - Remote Cloud to which data is transmitted by the system.
物联网核心构件 Sensors Microcontrollers Gateways Applications 物联网分层架构 </description>
    </item>
    
    <item>
      <title>IOT Notes</title>
      <link>https://wubigo.com/post/iot-notes/</link>
      <pubDate>Mon, 29 Jan 2018 18:20:21 +0800</pubDate>
      
      <guid>https://wubigo.com/post/iot-notes/</guid>
      <description>The dispersed nature of the Internet of Things (IoT) presents a major operational challenge that is uncommon in the traditional Internet or enterprise networks[5]. Devices that are managed together &amp;mdash; say a fleet of railcars &amp;mdash; are not physically colocated. Instead, they are widely geographically distributed. The operational approaches for management and security used in enterprise networks, where most hosts are densely contained in buildings or campuses, do not translate to the IoT.</description>
    </item>
    
  </channel>
</rss>