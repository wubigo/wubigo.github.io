<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NOSQL on wubigo</title>
    <link>https://wubigo.com/tags/nosql/</link>
    <description>Recent content in NOSQL on wubigo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Feb 2022 11:40:58 +0800</lastBuildDate>
    
	<atom:link href="https://wubigo.com/tags/nosql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redis消息队列和实时数据处理</title>
      <link>https://wubigo.com/post/redis-as-real-time-database/</link>
      <pubDate>Sat, 05 Feb 2022 11:40:58 +0800</pubDate>
      
      <guid>https://wubigo.com/post/redis-as-real-time-database/</guid>
      <description>REDIS Redis (Remote Dictionary Server)是一个流行的开源内存 提供高级键值抽象的键值存储。 Redis 是单线程的，它只处理一个命令 客户端在进程的主线程中一次。 不同于传统的KV 键是简单数据类型（通常是字符串）的系统，键 在 Redis 中可以用作复杂的数据类型，例如哈希、列表、 集和排序集。 此外，Redis 支持复杂的原子 对这些数据类型的操作（例如，从 一个列表，将具有给定分数的新值插入排序集等）。 Redis 抽象和高摄取速度已被证明特别重要 对于许多延迟敏感的任务很有用。 因此，Redis 已获得广泛采用，并被越来越多的人使用 生产环境中的公司.
Redis 支持高可用性和持久性。 高可用性 是通过将数据从主节点复制到 从节点并同步它们。 当一个主进程失败时，它的 对应的从属进程已准备好接管后续进程 称为故障转移。 持久性可以通过以下任一方式配置 以下两个选项：
 使用时间点快照文件 称为 RDB（Redis 数据库）
 使用名为AOF（仅附加文件）。
  注意这三种机制（AOF重写、RDB 快照和复制）依赖 fork 获取 进程内存的时间点快照并将其序列化 （而主进程继续为客户端命令提供服务）
项目简介 最近在做工业自动化(IIoT)项目，涉及到很多场景需要对一系列设备进行监控和信号处理。 该类场景对实时处理能力，系统稳定性，高可用性，容灾能力等等要求非常高。 其中几个核心的需求：
 设备数据不能丢失 实时告警(毫秒级延迟) 设备数据必须优先在边缘节点处理，边缘节点的物理服务器只有两台 每个边缘节点接入的设备上行数据量大概6万点/秒，数据包小于1K 中心需要汇聚和分析所有边缘节点的设备数据  技术现状 实时数据处理 实时数据处理是一个自 1990 年代以来一直在研究的问题 。 产生的数据量增加了，加上越来越复杂的软件解决方案 开发，需要满足这些需求出现了流式应用程序，例如 欺诈检测、网络监控和电子交易依赖于实时数据处理 确保所提供的服务被认为是正确和可靠的。 绝大多数现代应用程序使用某种数据库管理系统 处理数据。当应用程序收集或生成数据时，它会被存储和索引 它可以在以后由应用程序查询。但是，对于具有更严格 对实时数据处理的要求，这不是一个合适的方法。这是流的地方 处理开始发挥作用。流处理是在接收数据时直接处理数据。实时流 处理应用程序通常具有必须满足的某些关键要求。有低 输入和处理后的数据输出之间的延迟是实现实时的关键特征 应用。更传统的批处理方法需要以这样的方式收集数据 称为批次，其中处理只能在每个批次的最终数据块完成后开始 到达的。对于实时用例，这导致的延迟是不可接受的，因为这些实时的延迟 流应用程序最好在毫秒内。</description>
    </item>
    
    <item>
      <title>Lambda订阅SNS通知(下)</title>
      <link>https://wubigo.com/post/aws-lambda-dynamodb/</link>
      <pubDate>Mon, 31 Dec 2018 14:44:32 +0800</pubDate>
      
      <guid>https://wubigo.com/post/aws-lambda-dynamodb/</guid>
      <description> 创建函数  分配角色
zip function.zip index.js aws lambda create-function --function-name sns-db-function \ --zip-file fileb://function.zip --handler index.handler --runtime nodejs12.x \ --role arn:aws:iam::465691908928:role/fn-case-role   </description>
    </item>
    
    <item>
      <title>Dgraph note</title>
      <link>https://wubigo.com/post/2018-04-07-dgraphnotes/</link>
      <pubDate>Sat, 07 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2018-04-07-dgraphnotes/</guid>
      <description> Start Dgraph cluster dgraph zero  start Dgraph server  dgraph server --memory_mb 2048 --zero localhost:5080 --port_offset 2000 Note:port_offsetValue added to all listening port numbers. [Internal=7080, HTTP=8080, Grpc=9080]  How do I configure Go to use a proxy https://stackoverflow.com/questions/10383299/how-do-i-configure-go-to-use-a-proxy
Web based graph visualization with D3 and KeyLines https://cambridge-intelligence.com/web-graph-visualization-d3-keylines/
SETUP CLIENT set http_proxy=192.168.0.119:3128 git config --global http.proxy http://192.168.0.119:3128 go get -u github.com/derekparker/delve/cmd/dlv go get -u -v github.com/dgraph-io/dgo  </description>
    </item>
    
    <item>
      <title>Cassandra</title>
      <link>https://wubigo.com/post/cassandra/</link>
      <pubDate>Fri, 28 Apr 2017 17:08:07 +0800</pubDate>
      
      <guid>https://wubigo.com/post/cassandra/</guid>
      <description>特性  与hadoop集成，支持MR数据读取 二级索引 支持长行（最多20亿的列） 动态schema更改 bulk load 其他数据源如hadoop with sstableloader， CSV importing with cqlsh DTCS优化时序数据性能  DB CATEGORY BY CAP  CA  To primarily support consistency and availability means that you’re likely using two-phase commit for distributed transactions. It means that the system will block when a network partition occurs, so it may be that your system is limited to a single data center cluster in an attempt to mitigate this.</description>
    </item>
    
    <item>
      <title>RDBMS vs NoSQL</title>
      <link>https://wubigo.com/post/2012-07-04-rdbms-nosql/</link>
      <pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://wubigo.com/post/2012-07-04-rdbms-nosql/</guid>
      <description>B+树 vs. LSM树 RDBMS使用B+树专门针对磁盘存储而优化的N叉排序树 NoSQL使用LSM树</description>
    </item>
    
  </channel>
</rss>